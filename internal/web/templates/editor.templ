package templates

import (
	"fmt"
	"github.com/caedis/noreza/internal/mapping"
)

templ EditorDefault(isSwap bool) {
	if isSwap {
		<div id="editor" hx-swap-oob="innerHTML">
			<p class="text-gray-500">Select a profile to edit its mappings.</p>
		</div>
	} else {
		<p class="text-gray-500">Select a profile to edit its mappings.</p>
	}
}

templ Editor(m mapping.Mapping, profile, device string) {
	<script>
		var joystick_size = 248
		var deadzone = {{ m.AxisDeadzone }}
		var deadzone_size = Math.floor(deadzone / joystick_size)
	</script>
	<div class="flex min-h-screen flex-col items-center justify-center bg-gray-900 text-white">
		<span class="text-3xl mb-4">{ profile }</span>
		<div class="flex-row">
			<button
				class="ml-3 bg-gray-500 hover:bg-gray-600 rounded-md px-4 py-1"
				hx-patch={ fmt.Sprintf("/profiles/%s/clear", profile) }
				hx-confirm="Are you sure?"
				hx-target="#editor"
			>Clear Binds</button>
			<button
				class="ml-3 bg-gray-500 hover:bg-gray-600 rounded-md px-4 py-1"
				hx-get={ fmt.Sprintf("/profiles/%s/settings", profile) }
				hx-target="#modal-wrapper"
				hx-swap="innerHTML"
			>Settings</button>
		</div>
		<div
			class="mt-12"
		>
			switch (device) {
				case "cyborg":
					@cyborg(m, profile)
				case "cyborg2":
					@cyborg2(m, profile)
				case "cyro":
					@cyro(m, profile)
				case "keyzen":
					@keyzen(m, profile)
			}
		</div>
	</div>
	<dialog id="modal-wrapper"></dialog>
}

templ EditorModal(profile string, index uint8, mappingType, subkey, keyString string) {
	<div class="fixed inset-0 flex items-center justify-center bg-black/50">
		<div
			x-data={ fmt.Sprintf(`{
				keys: %s,
				capturing: false,
				keyHandler: null,
				startCapture() { this.capturing = true },
				stopCapture() { this.capturing = false },
				addKey(k, mode) {
					if (!this.keys.some(v => v.code === k.code && v.mode === k.mode)) {
						this.keys.push(k);
					}
				},
				removeKey(i) { this.keys.splice(i,1) },
				submit() {
					htmx.ajax('PATCH', '/profiles/%s/update', {
						values: {
							type: '%s',
							subkey: '%s',
							index: %d,
							updateKeys: JSON.stringify(this.keys),
						},
						target: "#editor"
					});
					document.getElementById('modal-wrapper').close();
				},
				cleanup() {
					if (this.keyHandler) {
						window.removeEventListener('keydown', this.keyHandler);
						this.keyHandler = null;
					}
					this.capturing = false;
				}
			}`, keyString, profile, mappingType, subkey, index) }
			x-init="
				const component = $data; // Alpine component
				component.keyHandler = (e) => {
					if (component.capturing) {
						e.preventDefault();
						component.addKey({ code: e.code, mode: 0 });
					}
				};
				window.addEventListener('keydown', component.keyHandler);

				const modal = document.getElementById('modal-wrapper');
				modal.addEventListener('close', () => component.cleanup());
    		"
			class="relative bg-gray-800 p-6 text-center text-white w-96 rounded-lg shadow-lg"
		>
			<p class="text-xl mb-2 text-gray-400">
				Remapping { mappingType } #{ index + 1 }
			</p>
			<!-- Capture box -->
			<div class="mb-1">
				<div
					class="w-28 mx-auto flex items-center justify-center border-2 rounded-lg cursor-pointer select-none transition
						   border-gray-600 hover:border-purple-500"
					x-bind:class="capturing ? 'bg-purple-600 border-purple-500' : 'bg-gray-700'"
					@click="capturing = !capturing"
				>
					<span class="text-sm" x-text="capturing ? 'Capturing...' : 'Click to bind'"></span>
				</div>
			</div>
			<!-- Selected keys -->
			<div class="flex flex-wrap justify-center gap-2 mb-4">
				<template x-for="(k, i) in keys" :key="i">
					<div class="ml-1 flex items-center bg-purple-700 p-1 rounded">
						<button class="text-sm text-white hover:text-red-500" x-text="k.code" @click="removeKey(i)"></button>
					</div>
				</template>
			</div>
			<!-- Mouse buttons -->
			<div class="flex justify-center gap-3 mb-4 mt-2">
				<button
					class="text-xs px-4 py-2 bg-purple-500 rounded hover:bg-purple-600"
					@click="addKey({ code: 'LClick', mode: 1 })"
				>Left Click</button>
				<button
					class="text-xs px-4 py-2 bg-purple-500 rounded hover:bg-purple-600"
					@click="addKey({ code: 'MClick', mode: 1 })"
				>Middle Click</button>
				<button
					class="text-xs px-4 py-2 bg-purple-500 rounded hover:bg-purple-600"
					@click="addKey({ code: 'RClick', mode: 1 })"
				>Right Click</button>
			</div>
			<!-- Control buttons -->
			<div class="flex justify-center gap-1">
				<button
					class="px-4 py-1 bg-blue-500 rounded hover:bg-blue-600"
					@click="keys = []"
				>Clear</button>
				<button
					class="px-4 py-1 bg-green-600 rounded hover:bg-green-700"
					@click="submit()"
				>Submit</button>
			</div>
			<!-- Close button -->
			<button
				class="absolute top-1 right-1 text-xs p-1 text-gray-500 hover:text-gray-300 font-bold"
				@click="cleanup(); document.getElementById('modal-wrapper').close()"
				hx-disinherit="*"
			>
				X
			</button>
		</div>
	</div>
	<script>
		var model = document.getElementById('modal-wrapper');
		model.setAttribute("closedby", "none");
		model.showModal();
	</script>
}

templ MappingButton(index uint8, m mapping.Mapping, row, col int, profile string) {
	<button
		data-key={ fmt.Sprintf("button-%d", index-1) }
		class="flex items-center justify-center rounded-lg bg-purple-700 relative h-18 w-18 cursor-pointer hover:bg-purple-600 text-xs whitespace-pre-line overflow-y-scroll"
		style={ fmt.Sprintf("grid-column-start: %d; grid-row-start:%d;", col, row) }
		hx-get={ fmt.Sprintf("/profiles/%s/update", profile) }
		hx-target="#modal-wrapper"
		hx-swap="innerHTML"
		hx-vals={ templ.JSONString(map[string]any{
			"type":    "button",
			"index":   index - 1,
		}) }
	>
		if key, ok := m.Buttons[index-1]; ok {
			{ concatKeys(key) }
		}
		<span class="absolute bottom-1 left-1 text-[8px] font-bold ml-0.5">#{ index }</span>
	</button>
}

templ DirectionButton(dir string, label string, hxVals map[string]any, keyLabel, profile string) {
	<button
		if hxVals["subkey"] == nil {
			data-key={ fmt.Sprintf("%s-%d", hxVals["type"], hxVals["index"]) }
		} else {
			data-key={ fmt.Sprintf("%s-%d-%s", hxVals["type"], hxVals["index"], hxVals["subkey"]) }
		}
		class={ fmt.Sprintf("absolute %s w-18 h-18 bg-purple-700 hover:bg-purple-800 flex items-center justify-center rounded-lg text-xs whitespace-pre-line overflow-y-scroll", dir) }
		hx-get={ fmt.Sprintf("/profiles/%s/update", profile) }
		hx-target="#modal-wrapper"
		hx-swap="innerHTML"
		hx-vals={ templ.JSONString(hxVals) }
	>
		{ keyLabel }
		<span class="absolute bottom-1 left-1 text-[8px] font-bold ml-0.5">{ label }</span>
	</button>
}

templ Joystick(xIndex, yIndex uint8, m mapping.Mapping, row, col int, profile string, centerButtonIndex uint8) {
	<div
		class="relative flex items-center justify-center row-span-3 col-span-3"
		style={ fmt.Sprintf("grid-column-start: %d; grid-row-start:%d;", col, row) }
	>
		<div hidden id="joystick-dot" class="absolute w-5 h-5 rounded-full bg-blue-900 border-2 border-blue-700 z-10"></div>
		<div class="absolute w-full h-full rounded-full border-1 border-purple-700"></div>
		@DirectionButton("", fmt.Sprintf("#%d", centerButtonIndex), map[string]any{"type": "button", "index": centerButtonIndex - 1}, func() string {
			if key, ok := m.Buttons[centerButtonIndex-1]; ok {
				return concatKeys(key)
			}
			return ""
		}(), profile)
		@DirectionButton("top-2 left-1/2 -translate-x-1/2", "0-",
			map[string]any{"type": "axis", "index": yIndex, "subkey": "negative"},
			func() string {
				if axis, ok := m.Axes[yIndex]; ok {
					return concatKeys(axis.NegativeKey)
				}
				return ""
			}(),
			profile,
		)
		@DirectionButton("bottom-2 left-1/2 -translate-x-1/2", "0+",
			map[string]any{"type": "axis", "index": yIndex, "subkey": "positive"},
			func() string {
				if axis, ok := m.Axes[yIndex]; ok {
					return concatKeys(axis.PositiveKey)
				}
				return ""
			}(),
			profile,
		)
		@DirectionButton("left-2 top-1/2 -translate-y-1/2", "1-",
			map[string]any{"type": "axis", "index": xIndex, "subkey": "negative"},
			func() string {
				if axis, ok := m.Axes[xIndex]; ok {
					return concatKeys(axis.NegativeKey)
				}
				return ""
			}(),
			profile,
		)
		@DirectionButton("right-2 top-1/2 -translate-y-1/2", "1+",
			map[string]any{"type": "axis", "index": xIndex, "subkey": "positive"},
			func() string {
				if axis, ok := m.Axes[xIndex]; ok {
					return concatKeys(axis.PositiveKey)
				}
				return ""
			}(),
			profile,
		)
	</div>
}

templ Hat(index uint8, m mapping.Mapping, row, col int, profile string, centerButtonIndex uint8) {
	<div
		class="relative flex items-center justify-center row-span-3 col-span-3"
		style={ fmt.Sprintf("grid-column-start: %d; grid-row-start:%d;", col, row) }
	>
		@DirectionButton("", fmt.Sprintf("#%d", centerButtonIndex), map[string]any{"type": "button", "index": centerButtonIndex - 1}, func() string {
			if key, ok := m.Buttons[centerButtonIndex-1]; ok {
				return concatKeys(key)
			}
			return ""
		}(), profile)
		@DirectionButton("top-2 left-1/2 -translate-x-1/2", "↑",
			map[string]any{"type": "hat", "index": index, "subkey": "up"},
			func() string {
				if hat, ok := m.Hats[index]; ok {
					key := hat.Up
					return concatKeys(key)
				}
				return ""
			}(),
			profile,
		)
		@DirectionButton("bottom-2 left-1/2 -translate-x-1/2", "↓",
			map[string]any{"type": "hat", "index": index, "subkey": "down"},
			func() string {
				if hat, ok := m.Hats[index]; ok {
					key := hat.Down
					return concatKeys(key)
				}
				return ""
			}(),
			profile,
		)
		@DirectionButton("left-2 top-1/2 -translate-y-1/2", "←",
			map[string]any{"type": "hat", "index": index, "subkey": "left"},
			func() string {
				if hat, ok := m.Hats[index]; ok {
					key := hat.Left
					return concatKeys(key)
				}
				return ""
			}(),
			profile,
		)
		@DirectionButton("right-2 top-1/2 -translate-y-1/2", "→",
			map[string]any{"type": "hat", "index": index, "subkey": "right"},
			func() string {
				if hat, ok := m.Hats[index]; ok {
					key := hat.Right
					return concatKeys(key)
				}
				return ""
			}(),
			profile,
		)
	</div>
}

templ cyborg(m mapping.Mapping, profile string) {
	<div class="grid grid-cols-10 grid-rows-6 gap-4">
		@MappingButton(1, m, 1, 2, profile)
		@MappingButton(2, m, 1, 3, profile)
		@MappingButton(3, m, 1, 4, profile)
		@MappingButton(4, m, 1, 5, profile)
		@Hat(0, m, 1, 7, profile, 25)
		@MappingButton(5, m, 2, 2, profile)
		@MappingButton(6, m, 2, 3, profile)
		@MappingButton(7, m, 2, 4, profile)
		@MappingButton(8, m, 2, 5, profile)
		@MappingButton(9, m, 3, 1, profile)
		@MappingButton(10, m, 3, 2, profile)
		@MappingButton(11, m, 3, 3, profile)
		@MappingButton(12, m, 3, 4, profile)
		@MappingButton(13, m, 3, 5, profile)
		@MappingButton(14, m, 3, 6, profile)
		@Joystick(0, 1, m, 4, 7, profile, 26)
		@MappingButton(15, m, 4, 2, profile)
		@MappingButton(16, m, 4, 3, profile)
		@MappingButton(17, m, 4, 4, profile)
		@MappingButton(18, m, 4, 5, profile)
		@MappingButton(19, m, 5, 2, profile)
		@MappingButton(20, m, 5, 3, profile)
		@MappingButton(21, m, 5, 4, profile)
		@MappingButton(22, m, 5, 5, profile)
		@MappingButton(23, m, 5, 10, profile)
	</div>
}

templ cyborg2(m mapping.Mapping, profile string) {
	<div class="grid grid-cols-10 grid-rows-6 gap-4">
		@MappingButton(1, m, 1, 2, profile)
		@MappingButton(2, m, 1, 3, profile)
		@MappingButton(3, m, 1, 4, profile)
		@MappingButton(4, m, 1, 5, profile)
		@Hat(0, m, 1, 7, profile, 25)
		@MappingButton(5, m, 2, 2, profile)
		@MappingButton(6, m, 2, 3, profile)
		@MappingButton(7, m, 2, 4, profile)
		@MappingButton(8, m, 2, 5, profile)
		@MappingButton(9, m, 3, 1, profile)
		@MappingButton(10, m, 3, 2, profile)
		@MappingButton(11, m, 3, 3, profile)
		@MappingButton(12, m, 3, 4, profile)
		@MappingButton(13, m, 3, 5, profile)
		@MappingButton(14, m, 3, 6, profile)
		@Joystick(0, 1, m, 4, 7, profile, 26)
		@MappingButton(15, m, 4, 2, profile)
		@MappingButton(16, m, 4, 3, profile)
		@MappingButton(17, m, 4, 4, profile)
		@MappingButton(18, m, 4, 5, profile)
		@MappingButton(19, m, 5, 2, profile)
		@MappingButton(20, m, 5, 3, profile)
		@MappingButton(21, m, 5, 4, profile)
		@MappingButton(22, m, 5, 5, profile)
		@MappingButton(23, m, 5, 10, profile)
		@MappingButton(24, m, 6, 10, profile)
	</div>
}

templ cyro(m mapping.Mapping, profile string) {
	<div class="grid grid-cols-8 grid-rows-6 gap-4">
		@Hat(0, m, 1, 1, profile, 17)
		@Joystick(0, 1, m, 4, 1, profile, 18)
		@MappingButton(1, m, 3, 4, profile)
		@MappingButton(2, m, 3, 5, profile)
		@MappingButton(3, m, 3, 6, profile)
		@MappingButton(4, m, 3, 7, profile)
		@MappingButton(5, m, 4, 4, profile)
		@MappingButton(6, m, 4, 5, profile)
		@MappingButton(7, m, 4, 6, profile)
		@MappingButton(8, m, 4, 7, profile)
		<div class="col-start-4 row-start-5 flex items-center justify-center ml-3 rounded-lg bg-purple-900 relative h-18 w-12 cursor-not-allowed text-xs whitespace-pre-line overflow-y-scroll">
			NYI
		</div>
		//@MappingButton(1, m, 5, 4, profile)
		@MappingButton(9, m, 5, 5, profile)
		@MappingButton(10, m, 5, 6, profile)
		@MappingButton(11, m, 5, 7, profile)
		@MappingButton(12, m, 5, 8, profile)
		@MappingButton(13, m, 6, 5, profile)
		@MappingButton(14, m, 6, 6, profile)
		@MappingButton(15, m, 6, 7, profile)
		@MappingButton(16, m, 6, 8, profile)
	</div>
}

templ keyzen(m mapping.Mapping, profile string) {
	<div class="grid grid-cols-10 grid-rows-6 gap-4">
		@MappingButton(1, m, 1, 3, profile)
		@MappingButton(2, m, 1, 4, profile)
		@MappingButton(3, m, 1, 5, profile)
		@Hat(0, m, 1, 7, profile, 27)
		@MappingButton(4, m, 2, 2, profile)
		@MappingButton(5, m, 2, 3, profile)
		@MappingButton(6, m, 2, 4, profile)
		@MappingButton(7, m, 2, 5, profile)
		@MappingButton(8, m, 2, 6, profile)
		@MappingButton(9, m, 3, 1, profile)
		@MappingButton(10, m, 3, 2, profile)
		@MappingButton(11, m, 3, 3, profile)
		@MappingButton(12, m, 3, 4, profile)
		@MappingButton(13, m, 3, 5, profile)
		@MappingButton(14, m, 3, 6, profile)
		@Joystick(0, 1, m, 4, 8, profile, 28)
		@MappingButton(15, m, 4, 1, profile)
		@MappingButton(16, m, 4, 2, profile)
		@MappingButton(17, m, 4, 3, profile)
		@MappingButton(18, m, 4, 4, profile)
		@MappingButton(19, m, 4, 5, profile)
		@MappingButton(20, m, 4, 6, profile)
		@MappingButton(21, m, 5, 2, profile)
		@MappingButton(22, m, 5, 3, profile)
		@MappingButton(23, m, 5, 4, profile)
		@MappingButton(24, m, 5, 5, profile)
		@MappingButton(25, m, 5, 11, profile)
		@MappingButton(26, m, 6, 11, profile)
	</div>
}
